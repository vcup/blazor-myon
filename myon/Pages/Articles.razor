@page "/Article/{SpecifyArticle?}"
@inject IJSRuntime JS

@using myon.Components

<div id="warpper">

    <div id="ArticleMenu">
    <Panel>
        <div id="ArticleMenuInsideLayout">
            <div id="MyonSign">
                <strong id=MyonText>Myon~</strong>
                <span id=SignText>@SignText</span>
            </div>
            <div id="ArticleNavSide">
            @foreach(var article in articles)
            {
                var isFocus = FocusArticle == article;
                <div class="ArticleNavPanel" @onclick="@(() => {
                    SetFocusArticle(article.Title); ScrollToArticleAsync(article);})">
                    <Panel>
                        @article.Title
                    </Panel>
                </div>
                <ul class="heading-list @(isFocus ? "unhide":"hide")">
                    @foreach (var (id, heading) in article.ArticleIndex)
                    {
                    <li @onclick="@(() => this.ScrollToIdAsync(@id))">
                        @heading
                    </li>
                    }
                </ul>
            }
            </div>
            <div id="Other"></div>
        </div>
    </Panel>
    </div>

    <div />

    <main id="Articles">
        @{
        var i = 0;
        foreach (var title in Directory.EnumerateFiles(ArticlesPath)
                                       .Select(Path.GetFileNameWithoutExtension))
        {
            var index = i++;
            <div @onpointerover="@(_ => SetFocusArticle(index))">
            <Article Title=@title IsMainComponent=@(title == Title) @ref="addArticleToList"/>
            </div>
        }}
    </main>

</div>

@code {
    [Parameter]
    public string? SpecifyArticle { get; set; }

    public string? Title => FocusArticle?.Title;

    public string SignText { get; set; } = "私はそれを、我慢できない！";

    private string ArticlesPath = "wwwroot/Articles";

    protected override void OnInitialized()
    {
        if (SpecifyArticle is not null)
        {
            ScrollToIdAsync(SpecifyArticle);
            SetFocusArticle(SpecifyArticle);
            StateHasChanged(); // 如果不调用，则尽管FocusArticle和Title都已更新，仍旧不会在标题中显示Title
        }

    }

    private Article addArticleToList { set => articles.Add(value); }

    public Article? FocusArticle { get; set; }

    private List<Article> articles = new();

    private void SetFocusArticle(int index) => FocusArticle = articles.ElementAt(index);
    private void SetFocusArticle(string title) => FocusArticle = articles.Where(a => a.Title == title).ElementAtOrDefault(0) ?? FocusArticle;

    private async void ScrollToIdAsync(string title) => await JS.InvokeVoidAsync("scrollToElementByID", title);
    private void ScrollToArticleAsync(Article article) => ScrollToIdAsync(article.Title!);
}
